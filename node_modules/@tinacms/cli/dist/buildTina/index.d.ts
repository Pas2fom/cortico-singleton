/**

 */
import { Database } from '@tinacms/graphql';
import { DocumentNode } from 'graphql';
interface ClientGenOptions {
    noSDK?: boolean;
    local?: boolean;
    verbose?: boolean;
    port?: number;
    rootPath?: string;
}
interface BuildOptions {
    local: boolean;
    dev?: boolean;
    verbose?: boolean;
    rootPath?: string;
}
interface BuildSetupOptions {
    isomorphicGitBridge?: boolean;
    experimentalData?: boolean;
}
export declare const buildSetupCmdBuild: (ctx: any, next: () => void, opts: BuildSetupOptions) => Promise<void>;
export declare const buildSetupCmdServerStart: (ctx: any, next: () => void, opts: BuildSetupOptions) => Promise<void>;
export declare const buildSetupCmdAudit: (ctx: any, next: () => void, options: {
    clean: boolean;
}) => Promise<void>;
export declare const buildCmdBuild: (ctx: {
    builder: ConfigBuilder;
    database: Database;
    graphQLSchema: DocumentNode;
    rootPath: string;
    usingTs: boolean;
    schema: unknown;
    apiUrl: string;
    tinaSchema: any;
}, next: () => void, options: Omit<BuildOptions & BuildSetupOptions & ClientGenOptions, 'bridge' | 'database' | 'store'>) => Promise<void>;
export declare const auditCmdBuild: (ctx: {
    builder: ConfigBuilder;
    rootPath: string;
    database: Database;
}, next: () => void, options: Omit<BuildOptions & BuildSetupOptions, 'bridge' | 'database' | 'store'>) => Promise<void>;
export declare const indexIntoSelfHostedDatabase: (ctx: {
    builder: ConfigBuilder;
    isSelfHostedDatabase?: boolean;
    rootPath: string;
    database: Database;
    graphQLSchema: DocumentNode;
    schema: any;
    tinaSchema: any;
}, next: () => void) => Promise<void>;
export declare class ConfigBuilder {
    private database;
    constructor(database: Database);
    build({ dev, verbose, rootPath, local }: BuildOptions): Promise<{
        schema: any;
        graphQLSchema: DocumentNode;
        tinaSchema: any;
    }>;
    genTypedClient({ usingTs, compiledSchema, noSDK, verbose, local, port, rootPath, }: ClientGenOptions & {
        usingTs: boolean;
        compiledSchema: any;
    }): Promise<string>;
}
export declare const buildAdmin: ({ schema, local, rootPath, apiUrl, }: {
    schema: any;
    local: boolean;
    rootPath: string;
    apiUrl: string;
}) => Promise<void>;
export {};
