/**

*/
import type { TinaCloudSchema as TinaCloudSchemaBase, TinaCloudCollection as TinaCloudCollectionBase, TinaCloudTemplateBase as TinaTemplate, TinaFieldBase } from '@tinacms/schema-tools';
import { buildDotTinaFiles } from './build';
export { resolve } from './resolve';
export * from './resolver/error';
export { createDatabase } from './database';
export { TinaLevelClient } from './level/tinaLevel';
export type { QueryOptions, Database, OnDeleteCallback, OnPutCallback, CreateDatabase, } from './database';
import type { Database } from './database';
export { sequential, assertShape } from './util';
export { stringifyFile, parseFile } from './database/util';
export { createSchema } from './schema/createSchema';
export { buildDotTinaFiles };
export declare type DummyType = unknown;
export declare const buildSchema: (rootPath: string, database: Database, flags?: string[]) => Promise<{
    graphQLSchema: import("graphql").DocumentNode;
    tinaSchema: import("@tinacms/schema-tools").TinaSchema;
}>;
export declare const getASTSchema: (database: Database) => Promise<import("graphql").GraphQLSchema>;
export declare type TinaCloudSchema = TinaCloudSchemaBase<false>;
export declare type TinaSchema = TinaCloudSchema;
export declare type TinaCloudCollection = TinaCloudCollectionBase<false>;
export declare type TinaCollection = TinaCloudCollectionBase<false>;
export declare type TinaField = TinaFieldBase;
export type { TinaTemplate };
export { FilesystemBridge, AuditFileSystemBridge, } from './database/bridge/filesystem';
export { IsomorphicBridge } from './database/bridge/isomorphic';
export type { Bridge } from './database/bridge';
