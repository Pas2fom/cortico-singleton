/**

*/
import * as G from 'graphql';
import type { BlueprintPath } from './types';
/**
 *
 * This check ensures that at type is a Document, but only one
 * that can be "formified". When using `Node` or `Document`, those
 * query fields should not have forms generated since they can't contain
 * fields.
 *
 * ```graphql
 * # Can be formified
 * {
 *   getPostDocument(relativePath: "") {
 *     data {
 *       title
 *     }
 *   }
 * }
 * ```
 *
 * ```graphql
 * # cannot be formified, even though it is a document field
 * {
 *   getPostDocument(relativePath: "") {
 *     ...on Document {
 *       id
 *     }
 *   }
 * }
 * ```
 */
export declare const isFormifiableDocument: (t: G.GraphQLOutputType) => boolean;
export declare const isScalarType: (t: G.GraphQLOutputType) => boolean;
export declare const isConnectionField: (t: G.GraphQLOutputType) => boolean;
/**
 * Selects the appropriate field from a GraphQLObject based on the selection's name
 */
export declare const getObjectField: (object: G.GraphQLOutputType, selectionNode: G.FieldNode) => G.GraphQLField<any, any, {
    [key: string]: any;
}>;
/**
 * Selects the appropriate type from a union based on the selection's typeCondition
 *
 * ```graphql
 * post {
 *    # would return PostDocument
 *   ...on PostDocument { ... }
 * }
 * ```
 */
export declare const getSelectedUnionType: (unionType: G.GraphQLOutputType, selectionNode: G.InlineFragmentNode) => any;
/**
 * Checks if the given type is a list type. Even though
 * this function is built-in to GraphQL it doesn't handle
 * the scenario where the list type is wrapped in a non-null
 * type, so the extra check here is needed.
 */
export declare function isListType(type: unknown): boolean;
/**
 *
 * Throws an error if the provided type is not a GraphQLUnionType
 */
export declare function ensureOperationDefinition(type: G.DefinitionNode): asserts type is G.OperationDefinitionNode;
/**
 * Generates the name and alias information for a given field node
 * and appends it to a shallow copy of the path provided
 */
export declare function buildPath({ fieldNode, type, parentTypename, path, }: {
    fieldNode: G.FieldNode;
    type: G.GraphQLOutputType;
    parentTypename?: string;
    path?: BlueprintPath[];
}): BlueprintPath[];
export declare const metaFields: G.SelectionNode[];
export declare const getRelativeBlueprint: (path: BlueprintPath[]) => string;
export declare const isSysField: (fieldNode: G.FieldNode) => boolean;
export declare const getBlueprintId: (path: BlueprintPath[]) => string;
export declare const getFieldAliasForBlueprint: (path: BlueprintPath[]) => string;
